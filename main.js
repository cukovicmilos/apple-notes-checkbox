/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AppleNotesCheckboxPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  enableAutoReorder: true,
  reorderDelay: 300
};
var AppleNotesCheckboxPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.reorderTimeout = null;
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new AppleNotesCheckboxSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      const target = evt.target;
      if (target && target.classList.contains("task-list-item-checkbox")) {
        this.handleCheckboxClick(target);
      }
    });
  }
  handleCheckboxClick(checkboxElement) {
    if (!this.settings.enableAutoReorder)
      return;
    if (this.reorderTimeout) {
      window.clearTimeout(this.reorderTimeout);
    }
    this.reorderTimeout = window.setTimeout(() => {
      this.reorderCheckboxes();
    }, this.settings.reorderDelay);
  }
  reorderCheckboxes() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView)
      return;
    const editor = activeView.editor;
    const content = editor.getValue();
    const lines = content.split("\n");
    const checkboxGroups = this.findCheckboxGroups(lines);
    let modified = false;
    let lineOffset = 0;
    for (const group of checkboxGroups) {
      const reorderedGroup = this.reorderGroup(group);
      if (this.hasGroupChanged(group, reorderedGroup)) {
        modified = true;
        this.replaceGroupInEditor(editor, group, reorderedGroup, lineOffset);
      }
      lineOffset += group.length;
    }
  }
  findCheckboxGroups(lines) {
    const groups = [];
    let currentGroup = [];
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const checkboxMatch = line.match(/^(\s*)-\s*\[([ x])\]\s*(.*)$/);
      if (checkboxMatch) {
        const indentLevel = checkboxMatch[1].length;
        const isChecked = checkboxMatch[2] === "x";
        const text = checkboxMatch[3];
        currentGroup.push({
          line: i,
          text,
          isChecked,
          indentLevel
        });
      } else {
        if (currentGroup.length > 0) {
          groups.push(currentGroup);
          currentGroup = [];
        }
      }
    }
    if (currentGroup.length > 0) {
      groups.push(currentGroup);
    }
    return groups;
  }
  reorderGroup(group) {
    const baseIndentLevel = Math.min(...group.map((item) => item.indentLevel));
    const unchecked = group.filter((item) => !item.isChecked);
    const checked = group.filter((item) => item.isChecked);
    return [...unchecked, ...checked];
  }
  hasGroupChanged(original, reordered) {
    if (original.length !== reordered.length)
      return true;
    for (let i = 0; i < original.length; i++) {
      if (original[i].text !== reordered[i].text || original[i].isChecked !== reordered[i].isChecked) {
        return true;
      }
    }
    return false;
  }
  replaceGroupInEditor(editor, originalGroup, reorderedGroup, lineOffset) {
    const startLine = originalGroup[0].line;
    const endLine = originalGroup[originalGroup.length - 1].line;
    const newLines = reorderedGroup.map((item) => {
      const indent = " ".repeat(item.indentLevel);
      const checkbox = item.isChecked ? "x" : " ";
      return `${indent}- [${checkbox}] ${item.text}`;
    });
    const startPos = { line: startLine, ch: 0 };
    const endPos = { line: endLine + 1, ch: 0 };
    editor.replaceRange(newLines.join("\n") + "\n", startPos, endPos);
  }
  onunload() {
    if (this.reorderTimeout) {
      window.clearTimeout(this.reorderTimeout);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var AppleNotesCheckboxSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Apple Notes Checkbox Settings" });
    new import_obsidian.Setting(containerEl).setName("Enable Auto-Reorder").setDesc("Automatically move checked items below unchecked items").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableAutoReorder).onChange(async (value) => {
      this.plugin.settings.enableAutoReorder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Reorder Delay").setDesc("Delay in milliseconds before reordering (prevents rapid reordering)").addSlider((slider) => slider.setLimits(100, 1e3, 50).setValue(this.plugin.settings.reorderDelay).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.reorderDelay = value;
      await this.plugin.saveSettings();
    }));
  }
};
